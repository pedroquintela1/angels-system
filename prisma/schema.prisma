generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(cuid())
  email              String           @unique
  password           String
  firstName          String
  lastName           String
  phone              String?
  cpf                String           @unique
  birthDate          DateTime
  street             String?
  number             String?
  complement         String?
  district           String?
  city               String?
  state              String?
  zipCode            String?
  country            String           @default("BR")
  role               UserRole         @default(USER)
  kycStatus          KycStatus        @default(PENDING)
  kycSubmittedAt     DateTime?
  kycApprovedAt      DateTime?
  kycRejectedAt      DateTime?
  kycRejectionReason String?
  isActive           Boolean          @default(true)
  emailVerified      DateTime?
  referralCode       String           @unique
  referredBy         String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  documents          Document[]
  reviewedDocuments  KycDocument[]    @relation("KycDocumentReviewer")
  kycDocuments       KycDocument[]
  performedReviews   KycReview[]      @relation("KycReviewer")
  kycReviews         KycReview[]
  membership         Membership?
  notifications      Notification[]
  tickets            SupportTicket[]
  transactions       Transaction[]
  investments        UserInvestment[]
  referrer           User?            @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals          User[]           @relation("UserReferrals")

  @@index([referredBy], map: "idx_users_referred_by")
  @@map("users")
}

model Membership {
  id                 String           @id @default(cuid())
  userId             String           @unique
  status             MembershipStatus @default(ACTIVE)
  monthlyFee         Float            @default(20.00)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  nextPaymentDate    DateTime
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memberships")
}

model InvestmentOpportunity {
  id             String             @id @default(cuid())
  title          String
  description    String
  targetAmount   Float
  currentAmount  Float              @default(0)
  minInvestment  Float
  maxInvestment  Float
  expectedReturn Float?
  startDate      DateTime
  endDate        DateTime
  status         InvestmentStatus   @default(DRAFT)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  documents      Document[]
  returns        InvestmentReturn[]
  investments    UserInvestment[]

  @@map("investment_opportunities")
}

model UserInvestment {
  id            String                @id @default(cuid())
  userId        String
  opportunityId String
  amount        Float
  investedAt    DateTime              @default(now())
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  returns       InvestmentReturn[]
  opportunity   InvestmentOpportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, opportunityId])
  @@index([opportunityId], map: "idx_user_investments_opportunity_id")
  @@map("user_investments")
}

model InvestmentReturn {
  id               String                @id @default(cuid())
  opportunityId    String
  investmentId     String
  totalSaleAmount  Float
  platformFee      Float
  netProfit        Float
  userReturnAmount Float
  returnPercentage Float
  distributedAt    DateTime              @default(now())
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  investment       UserInvestment        @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  opportunity      InvestmentOpportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  @@index([investmentId], map: "idx_investment_returns_investment_id")
  @@index([opportunityId], map: "idx_investment_returns_opportunity_id")
  @@map("investment_returns")
}

model Transaction {
  id                   String            @id @default(cuid())
  userId               String
  type                 TransactionType
  status               TransactionStatus @default(PENDING)
  amount               Float
  description          String
  gatewayTransactionId String?
  gatewayResponse      Json?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_transactions_user_id")
  @@map("transactions")
}

model Document {
  id            String                 @id @default(cuid())
  userId        String?
  opportunityId String?
  name          String
  type          String
  url           String
  size          Int?
  mimeType      String?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  opportunity   InvestmentOpportunity? @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  user          User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([opportunityId], map: "idx_documents_opportunity_id")
  @@index([userId], map: "idx_documents_user_id")
  @@map("documents")
}

model SupportTicket {
  id          String          @id @default(cuid())
  userId      String
  subject     String
  description String
  status      TicketStatus    @default(OPEN)
  priority    TicketPriority  @default(MEDIUM)
  assignedTo  String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    TicketMessage[]

  @@index([userId], map: "idx_support_tickets_user_id")
  @@map("support_tickets")
}

model TicketMessage {
  id         String        @id @default(cuid())
  ticketId   String
  message    String
  isFromUser Boolean       @default(true)
  isInternal Boolean       @default(false)
  authorId   String?
  createdAt  DateTime      @default(now())
  ticket     SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId], map: "idx_ticket_messages_ticket_id")
  @@map("ticket_messages")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_notifications_user_id")
  @@map("notifications")
}

model KycDocument {
  id              String            @id @default(cuid())
  userId          String
  type            KycDocumentType
  fileName        String
  filePath        String
  fileSize        Int
  mimeType        String
  status          KycDocumentStatus @default(PENDING)
  reviewedBy      String?
  reviewedAt      DateTime?
  rejectionReason String?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  reviewer        User?             @relation("KycDocumentReviewer", fields: [reviewedBy], references: [id])
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews         KycReview[]

  @@index([reviewedBy], map: "idx_kyc_documents_reviewed_by")
  @@index([userId], map: "idx_kyc_documents_user_id")
  @@map("kyc_documents")
}

model KycReview {
  id         String            @id @default(cuid())
  userId     String
  documentId String?
  reviewerId String
  action     KycDocumentStatus
  comment    String?
  createdAt  DateTime          @default(now())
  document   KycDocument?      @relation(fields: [documentId], references: [id], onDelete: Cascade)
  reviewer   User              @relation("KycReviewer", fields: [reviewerId], references: [id])
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([documentId], map: "idx_kyc_reviews_document_id")
  @@index([reviewerId], map: "idx_kyc_reviews_reviewer_id")
  @@index([userId], map: "idx_kyc_reviews_user_id")
  @@map("kyc_reviews")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  SUPPORT
  FINANCIAL
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CANCELLED
}

enum InvestmentStatus {
  DRAFT
  ACTIVE
  CLOSED
  COMPLETED
  CANCELLED
}

enum TransactionType {
  MEMBERSHIP_PAYMENT
  INVESTMENT
  RETURN
  REFERRAL_BONUS
  LOTTERY_PURCHASE
  LOTTERY_PRIZE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum KycDocumentType {
  IDENTITY_FRONT
  IDENTITY_BACK
  CPF_DOCUMENT
  PROOF_OF_ADDRESS
  SELFIE_WITH_DOCUMENT
  INCOME_PROOF
  BANK_STATEMENT
  OTHER
}

enum KycDocumentStatus {
  PENDING
  APPROVED
  REJECTED
  RESUBMIT
}
