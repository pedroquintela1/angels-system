import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';

import { authOptions } from '@/lib/auth';
import { notificationService } from '@/lib/notifications';

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'N√£o autorizado' },
        { status: 401 }
      );
    }

    // Create test notifications
    const testNotifications = [
      {
        userId: session.user.id,
        title: 'üéâ KYC Aprovado!',
        message: 'Seu documento RG/CNH (Frente) foi aprovado com sucesso!',
        type: 'kyc_approved',
      },
      {
        userId: session.user.id,
        title: '‚ùå Documento Rejeitado',
        message: 'Seu documento Comprovante de Resid√™ncia foi rejeitado. Motivo: Documento ileg√≠vel.',
        type: 'kyc_rejected',
      },
      {
        userId: session.user.id,
        title: 'üîÑ Reenvio Solicitado',
        message: 'Por favor, reenvie seu documento CPF. Instru√ß√µes: Certifique-se de que o documento esteja bem iluminado.',
        type: 'kyc_resubmit',
      },
      {
        userId: session.user.id,
        title: 'üèÜ Verifica√ß√£o Completa!',
        message: 'Parab√©ns! Sua verifica√ß√£o KYC foi aprovada completamente. Agora voc√™ tem acesso total √† plataforma.',
        type: 'kyc_complete',
      },
      {
        userId: session.user.id,
        title: 'üì¢ Nova Oportunidade',
        message: 'Uma nova oportunidade de investimento est√° dispon√≠vel: Expans√£o de Franquia de Alimenta√ß√£o.',
        type: 'investment_opportunity',
      },
    ];

    const createdNotifications = [];

    for (const notificationData of testNotifications) {
      const notification = await notificationService.createNotification(notificationData);
      createdNotifications.push(notification);
    }

    return NextResponse.json({
      message: 'Notifica√ß√µes de teste criadas com sucesso!',
      count: createdNotifications.length,
      notifications: createdNotifications,
    });

  } catch (error) {
    console.error('Test notifications API error:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}
